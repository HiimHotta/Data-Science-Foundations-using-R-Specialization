`:`
`:`
":"
?":"
seq(1,20)
seq(0, 10, by = 0.5)
seq (5, 10, length= 30)
my_seq <- seq (5, 10, length = 30)
length(seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep (0, times = 40)
rep (c(0,1,2), times = 10)
rep (c (0, 1, 2), each = 10)
bye()
library (swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm (1000)
z <- rep (NA, 1000)
my_data <- sample(c(y, z), 100).
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
?sum
sum(my_na)
my_data
0/0
Inf - Inf
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,
| 10)]
x[-c(2, 10)]
vect <- c (foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim (my_vector)
length(my_vector)
dim (my_vector) <- c(4, 5)
dim (my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix (1:20, nrow = 4, ncol = 5)
identical (my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind (patients, my_matrix)
my_data <- data.frame (patients, my_matrix)
my_data
class (my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames (my_data, cnames)
colnames (my_data) <- cnames
my_data
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5!= 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any (ints < 0)
all (ints > 0)
Sys.Date()
mean (c(2,
| 4, 5))
c(2,4, 5)
mean (c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder (5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
Try typing remainder(4, div = 2)
remainder(4, div = 2)
args(remainder)
submit()
evaluate (sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x(0)}, c(8, 4, 0))
evaluate(function(x){x[1])}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram ("Ha")
submit()
mad_libs (place = "Nowhere", adjective = "nothing special", noun ="nothing")
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass (d1)
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class (t1)
unclass (t1)
t2 <- as.POSIXlt(Sys.time())
class (t2)
t2
unclass (t2)
str (unclass (t2))
t2$min
weekdays(d1)
months(t1)
quartes (t2)
quarters (t2)
t3 <- strptime ("October 17, 1986 08:24")
?strptime
t3 <- strptime ("October 17, 1986 08:24", "%m %d, %Y %H:%M")
info()
play()
t3 <- strptime ("October 17, 1986 08:24", "%m %d, %Y %H:%M")
t3
t3 <- strptime ("October 17, 1986 08:24", format = "%m %d, %Y %H:%M")
t3
t3 <- strptime ("October 17", format = "%m %d")
t3
t3 <- strptime ("October 17", format = "%M %d")
t3
t3 <- strptime ("October 17", format = "%B %d")
t3
t3 <- strptime ("October 17", format = "%b %d")
t3
t3 <- strptime ("October 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3
nxt()
t3 <- strptime ("October 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3 "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class (t4)
Sys.time() > t1
Sys.time() - t1
(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply (flags, class)
class (cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply (flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply (flag_shapes, range)
shape_mat <- sapply (flag_shapes, range)
shape_mat
class (shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply (flags, unique)
unique_vals
lapply (unique_vals, length)
sapply (unique_vals, length)
sapply (flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
unique()
sapply (flags, unique)
vapply (flags, unique, numeric(1))
ok()
sapply (flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
debug(ls)
ls()
1
ls()
1
ls()
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
x <- with(mtcars, tapply(mpg, cyl, mean))
x
x$4
x$'4' - x$'8'
x$"4" - x$'8'
x$"4" - x$"8"
q
x
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
x <- with(mtcars, tapply(mpg, cyl, mean))
x$'4' - x$'8'
x[1]
x[1] - x[2]
x[1] - x[3]
mtcars
x <- with(mtcars, tapply(hp, cyl, mean))
x
x[1]-x[3]
?solve
source('~/.active-rstudio-document')
x <- matrix(c(2, 7), c(2,8))
x
?matrix
x <- matrix(c(2, 7, 2, 8), 2, 2)
x
x <- matrix(c(2, 2, 7, 8), 2, 2)
x
makeCacheMatrix()
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x, ...)
cacheSolve(x)
source('~/.active-rstudio-document')
a <- makeVector(c(1, 2, 3))
a
makeVector(c(1, 2, 3))
x <- c(1, 2, 3)
cachemean (x)
cachemean (x, getmean)
a <- makeVector(c(1, 2, 3))
cachemean (a)
makeCacheMatrix (c (2, 2, 7, 8), 2, 2)
makeCacheMatrix (c(2, 2, 7, 8))
a <- makeCacheMatrix (c(2, 2, 7, 8))
cacheSolve(a)
makeCacheMatrix (matrix (2, 2, 7, 8), 2, 2)
makeCacheMatrix (matrix (c(2, 2, 7, 8), 2, 2))
a <- makeCacheMatrix (matrix (c(2, 2, 7, 8), 2, 2))
cacheSolve(a)
library(swirl)
swirl()
ls()
class(plant)
class(plants)
dim (plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample (1:20, 10)
LETTERS
sample (LETTERS)
flips <- sample (100, c (0, 1), replace = TRUE, c (0.3, 0.7))
flips <- sample (100, c (0, 1), replace = TRUE, prob = c (0.3, 0.7))
flips <- sample (100, c (0, 1), replace = TRUE, prob = c (0.3, 0.7))
flips <- sample (100, c (0, 1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample (c (0, 1), 100,  replace = TRUE, prob = c (0.3, 0.7))
flips
sum(flips)
rbinom?
;
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate (100, rpois(5, 10))
my_pois <- replicate (100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(dar)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot (cars, main = "My Plot")
?plot
plot (cars, sub = "My Plot Subtitle")
?par
plot (cars, col = 2)
plot (cars, xlim = c(10, 15))
?points
plot (cars, pch = 2)
data(mtcars)
?boxplot
boxplot (formula = mpg ~ cyl, data = cars)
boxplot (formula = mpg ~ cyl, data = mtcars)
hist (mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot (y)
plot (x, y)
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL")
rversion()
install.packages("BiocManager")
source("https://bioconductor.org/biocLite.R")
BiocManager::install("biocLite")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0b5cab9bf2f1eb5ee59a",
secret = "7d939920268547d00b3a1cbc073bf4c6ec1b3ba2"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req
x <- content (req)
x
head(x)
x
json1 = content (req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json1 = content (req)
json2 = jsonlite::fromJSON(jsonlite::toJSON(json1))
json2[1,1:4]
json1 = content (req)
json2 = jsonlite::fromJSON(jsonlite::toJSON(json1))
json2
json2$created_at
json[json2$name == "datasharing"]
json2[json2$name == "datasharing",]
output <- read.fortran("quiz5.for", format="A9.0", skip=1)
output <- read.fortran("quiz5.for", format="10A9.0", skip=1)
output <- read.fortran("quiz5.for", format="1A9.0", skip=1)
output <- read.fortran("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
output <- read.fwf("quiz5.for",widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 1)
setwd("coursera/Data Science/Getting & Cleaning Data/week2")
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 1)
output
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 2)
output
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 3)
head(output)
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 4)
head(output)
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 3)
head(output)
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 2)
head(output)
output <- read.fwf("quiz5.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 4)
head(output)
sum (output[,4])
read.csv("quiz2.csv")
library(sqldf)
read.csv("quiz2.csv")
x <- read.csv("quiz2.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
acs <- read.csv("quiz2.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
x <- sqldf("select pwgtp1 from acs")
sqldf("select * from acs where AGEP \lt< 50 and pwgtp1")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
