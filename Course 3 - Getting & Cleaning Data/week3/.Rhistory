t1 <- Sys.time()
t1
class (t1)
unclass (t1)
t2 <- as.POSIXlt(Sys.time())
class (t2)
t2
unclass (t2)
str (unclass (t2))
t2$min
weekdays(d1)
months(t1)
quartes (t2)
quarters (t2)
t3 <- strptime ("October 17, 1986 08:24")
?strptime
t3 <- strptime ("October 17, 1986 08:24", "%m %d, %Y %H:%M")
info()
play()
t3 <- strptime ("October 17, 1986 08:24", "%m %d, %Y %H:%M")
t3
t3 <- strptime ("October 17, 1986 08:24", format = "%m %d, %Y %H:%M")
t3
t3 <- strptime ("October 17", format = "%m %d")
t3
t3 <- strptime ("October 17", format = "%M %d")
t3
t3 <- strptime ("October 17", format = "%B %d")
t3
t3 <- strptime ("October 17", format = "%b %d")
t3
t3 <- strptime ("October 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3
nxt()
t3 <- strptime ("October 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3 "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class (t4)
Sys.time() > t1
Sys.time() - t1
(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply (flags, class)
class (cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply (flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply (flag_shapes, range)
shape_mat <- sapply (flag_shapes, range)
shape_mat
class (shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply (flags, unique)
unique_vals
lapply (unique_vals, length)
sapply (unique_vals, length)
sapply (flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
unique()
sapply (flags, unique)
vapply (flags, unique, numeric(1))
ok()
sapply (flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
debug(ls)
ls()
1
ls()
1
ls()
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
x <- with(mtcars, tapply(mpg, cyl, mean))
x
x$4
x$'4' - x$'8'
x$"4" - x$'8'
x$"4" - x$"8"
q
x
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
x <- with(mtcars, tapply(mpg, cyl, mean))
x$'4' - x$'8'
x[1]
x[1] - x[2]
x[1] - x[3]
mtcars
x <- with(mtcars, tapply(hp, cyl, mean))
x
x[1]-x[3]
?solve
source('~/.active-rstudio-document')
x <- matrix(c(2, 7), c(2,8))
x
?matrix
x <- matrix(c(2, 7, 2, 8), 2, 2)
x
x <- matrix(c(2, 2, 7, 8), 2, 2)
x
makeCacheMatrix()
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x, ...)
cacheSolve(x)
source('~/.active-rstudio-document')
a <- makeVector(c(1, 2, 3))
a
makeVector(c(1, 2, 3))
x <- c(1, 2, 3)
cachemean (x)
cachemean (x, getmean)
a <- makeVector(c(1, 2, 3))
cachemean (a)
makeCacheMatrix (c (2, 2, 7, 8), 2, 2)
makeCacheMatrix (c(2, 2, 7, 8))
a <- makeCacheMatrix (c(2, 2, 7, 8))
cacheSolve(a)
makeCacheMatrix (matrix (2, 2, 7, 8), 2, 2)
makeCacheMatrix (matrix (c(2, 2, 7, 8), 2, 2))
a <- makeCacheMatrix (matrix (c(2, 2, 7, 8), 2, 2))
cacheSolve(a)
library(swirl)
swirl()
ls()
class(plant)
class(plants)
dim (plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample (1:20, 10)
LETTERS
sample (LETTERS)
flips <- sample (100, c (0, 1), replace = TRUE, c (0.3, 0.7))
flips <- sample (100, c (0, 1), replace = TRUE, prob = c (0.3, 0.7))
flips <- sample (100, c (0, 1), replace = TRUE, prob = c (0.3, 0.7))
flips <- sample (100, c (0, 1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample (c (0, 1), 100,  replace = TRUE, prob = c (0.3, 0.7))
flips
sum(flips)
rbinom?
;
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate (100, rpois(5, 10))
my_pois <- replicate (100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(dar)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot (cars, main = "My Plot")
?plot
plot (cars, sub = "My Plot Subtitle")
?par
plot (cars, col = 2)
plot (cars, xlim = c(10, 15))
?points
plot (cars, pch = 2)
data(mtcars)
?boxplot
boxplot (formula = mpg ~ cyl, data = cars)
boxplot (formula = mpg ~ cyl, data = mtcars)
hist (mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot (y)
plot (x, y)
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL")
rversion()
install.packages("BiocManager")
source("https://bioconductor.org/biocLite.R")
BiocManager::install("biocLite")
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim (mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
Use select(cran, r_arch:country)
select(cran, r_arch:country)
select(country : cran, r_arch)
select(country:cran, r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select (cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version < "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500,] r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na())
filter(cran, !is.na(cran))
filter(cran, !is.na(r_version))
cran2 <- select (cran, size:ip_id)
arrange (cran2, ip_id)
arrange (cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange (cran2, country, desc(r_version), ip_id)
cran3 <- select (ip_id, package, size)
cran3 <- select (cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate (cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df (mydf)
rm("mydf")
cran
?group_by
by_package <- group_by (cran, package)
by_package
summarize (by_package, mean(size))
?n
?n_distinct
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
submit()
reset()
swirl()
library(swirl)
swirl()
submit()
submit()
pack_sum
by_package
submit()
pack_sum
by_package
?n
n(by_package)
n()
summarize (by_package, count = n())
submit()
pack_sum
submit()
pack_sum <- summarize(by_package,count = n(package), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter (pack_sum, count > 679)
top_counts
View (top_counts)
top_counts_sorted <- arrange (top_counts, desc (counts))
top_counts_sorted <- arrange (top_counts, desc (count))
View (top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter (pack_sum, unique > 465)
View (top_unique)
top_unique_sorted <- arrange (top_unique, desc (unique))
View (top_unique_sorted)
submit()
submit()
?chain
??chain
submit()
View (result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
swirl()
library (tidyr)
students
?gather
gather (students, sex, count, -grade)
students2
res <- gather (students, sex_class, count, -grade)
res <- gather (students2, sex_class, count, -grade)
res
?separate
separate (data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate (status = "passed")
passed <- mutate (passed, status = "passed")
failed <- mutate (failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
?read.csv
?read.fwf
con <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
read.csv (url)
con
read.csv (url)
read.csv (con)
x <- read.csv(con)
x <- read.csv(con)
x <- read.csv(con)
con
con <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
x <- read.csv(con)
x
library(dplyr)
filter (q1, ACR == 3)
filter (x, ACR == 3)
agricultureLogical <- filter (x, ACR == 3, AGS == 6)
agricultureLogical
which(agricultureLogical)
agricultureLogical <- x [ACR == 3, AGS == 6,]
agricultureLogical <- x [ACR == 3, ]
agricultureLogical <- x [x$ACR == 3, ]
agricultureLogical <- x [x$ACR == 3, x$AGS == 6,]
agricultureLogical <- x [x$ACR == 3, ]
agricultureLogical <- x [x$AGS == 6,]
agricultureLogical <- agricultureLogical [agricultureLogical$ACR == 3, ]
agricultureLogical
which (agricultureLogical)
agricultureLogical <- agricultureLogical$ACR == 3
agricultureLogical
agricultureLogical <- agricultureLogical$AGS == 6
agricultureLogical <- x$AGS == 6 & x$ACR == 3
agricultureLogical
which (agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
con <- con2 <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ")
con2 <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ")
readJPEG(con2, native=TRUE)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", native=TRUE)
?readJPEG
setwd("coursera/Data Science/Getting & Cleaning Data/week3")
readJPEG("q2.jpg")
q2 <- readJPEG("q2.jpg")
?quantile
quantile (q2, probs = seq (0.3, 0.8))
quantile (q2, probs = seq (0.3, 0.8))
quantile (q2, probs = c(0.3, 0.8))
quantile (q2, probs = 0.3)
quantile (q2, probs = 0.8)
readJPEG("q2.jpg", native = TRUE)
q2 <- readJPEG("q2.jpg", native = TRUE)
quantile (q2, probs = c(0.3, 0.8))
con30 <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
con31 <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
q30 <- read.csv (con30)
q31 <- read.csv (con31)
q30
?as_tibble
q31 <- read.csv (con31) %>% as_tibble
con30 <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
con31 <- url ("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
q30 <- read.csv (con30)
q31 <- read.csv (con31) %>% as_tibble
q31
head (q31)
View (q31)
